//======================================================================================================================
namespace hhlogic.streams.implementation {
//----------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
//======================================================================================================================


//======================================================================================================================
public sealed class EmptyStream<T> : Stream<T>
{
  //--------------------------------------------------------------------------------------------------------------------
  public static readonly EmptyStream<T> instance = new EmptyStream<T>();
  //--------------------------------------------------------------------------------------------------------------------
  private EmptyStream()
  {

  }
  //--------------------------------------------------------------------------------------------------------------------
  public void forEach(Action<T> a) {}
  //--------------------------------------------------------------------------------------------------------------------
  public bool forEachWhile(Predicate<T> f)
  {
    return true;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> ifPresent(Action<T> a)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> filter(Predicate<T> p)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<M> map<M>(Func<T, M> f)
  {
    return EmptyStream<M>.instance;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<M> map<M>(uint mergeSize, Func<T[], M> mapper)
  {
    return EmptyStream<M>.instance;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<M> mapIfPresent<M>(Func<T, Maybe<M>> f)
  {
    return EmptyStream<M>.instance;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<M> flatMap<M>(Func<T, Stream<M>> f)
  {
    return EmptyStream<M>.instance;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Maybe<uint> fastCount()
  {
    return Maybe.of(0u);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public uint count()
  {
    return 0;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public bool isEmpty()
  {
    return true;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public bool isNotEmpty()
  {
    return false;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public T[] toArray()
  {
    return new T[] {};
  }
  //--------------------------------------------------------------------------------------------------------------------
  public List<T> toList()
  {
    return new List<T>();
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Dictionary<K, V> toDictionary<K, V>(Func<T, Entry<K, V>> e)
  {
    return new Dictionary<K, V>();
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> reverse()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> sort(Func<T, T, int> f)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> shuffle()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> shuffle(Random random)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> distinct()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Maybe<T> first()
  {
    return Maybe<T>.nothing;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Maybe<T> last()
  {
    return Maybe<T>.nothing;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Maybe<T> head()
  {
    return Maybe<T>.nothing;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> tail()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> limit(uint i)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> skip(uint i)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> append(T value)
  {
    return new SingletonStream<T>(value);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> prepend(T value)
  {
    return new SingletonStream<T>(value);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> join(Stream<T> stream)
  {
    return stream;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> join(params T[] array)
  {
    return new ArrayStream<T>(array, 0);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> repeat(uint factor)
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<M> repeat<M>(params Func<T, M>[] maps)
  {
    return EmptyStream<M>.instance;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<M> repeat<M>(Stream<Func<T, M>> maps)
  {
    return EmptyStream<M>.instance;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Maybe<T> reduce(Func<T, T, T> f)
  {
    return Maybe<T>.nothing;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public U reduce<U>(U identity, Func<U, T, U> accumulator)
  {
    return identity;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public U reduce<U>(hhlogic.streams.Tuple<U, Func<U, T, U>> reducer)
  {
    return reducer.first;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public Stream<T> snapshot()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
}
//======================================================================================================================


//======================================================================================================================
} // End Namespace
//======================================================================================================================
