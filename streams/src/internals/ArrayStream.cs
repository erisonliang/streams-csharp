//======================================================================================================================
namespace hhlogic.streams.internals {
//----------------------------------------------------------------------------------------------------------------------
using System;
//======================================================================================================================


//======================================================================================================================
public sealed class ArrayStream<T> : AbstractStream<T>
{
  //--------------------------------------------------------------------------------------------------------------------
  private readonly T[] array;
  private readonly uint startIndex;
  //--------------------------------------------------------------------------------------------------------------------
  public ArrayStream(T[] array, uint startIndex)
  {
    this.array = array;
    this.startIndex = startIndex;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override bool forEachWhile(Predicate<T> f)
  {
    for(uint i = startIndex; i < array.Length; i++)
      if(array[i] != null && !f(array[i]))
        return false;

    return true;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<uint> fastCount()
  {
    return Maybe.of((uint)(array.Length - startIndex));
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<T> last()
  {
    return fastCount().filter(i => i > 0).map(i => array[array.Length - 1]);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<T> head()
  {
    return fastCount().filter(i => i > 0).map(i => array[startIndex]);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Stream<T> tail()
  {
    return fastCount().filter(i => i > 1).flatMap(i => new ArrayStream<T>(array, startIndex + 1));
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Stream<T> snapshot()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
}
//======================================================================================================================


//======================================================================================================================
} // End Namespace
//======================================================================================================================
