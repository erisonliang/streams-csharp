//======================================================================================================================
namespace hhlogic.streams.internals {
//----------------------------------------------------------------------------------------------------------------------
using System;
//======================================================================================================================


//======================================================================================================================
public sealed class SkipStream<T> : AbstractStream<T>
{
  //--------------------------------------------------------------------------------------------------------------------
  private readonly Stream<T> underlyingStream;
  private readonly uint skipCount;
  //--------------------------------------------------------------------------------------------------------------------
  public SkipStream(Stream<T> underlyingStream, uint skipCount = 1)
  {
    this.underlyingStream = underlyingStream;
    this.skipCount = skipCount;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override bool forEachWhile(Predicate<T> f)
  {
    var skip = skipCount;

    return underlyingStream.forEachWhile(i =>
    {
      if(skip > 0)
      {
        skip--;
        return true;
      }

      return f(i);
    });
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<uint> fastCount()
  {
    return underlyingStream.fastCount().map(i => i > skipCount? i - skipCount : 0);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<T> last()
  {
    return next(skipCount, underlyingStream).last();
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<T> head()
  {
    return next(skipCount, underlyingStream).head();
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Stream<T> tail()
  {
    return next(skipCount, underlyingStream).tail();
  }
  //--------------------------------------------------------------------------------------------------------------------
  private static Stream<T> next(uint skip, Stream<T> underlying)
  {
    return skip < 1u? underlying : next(skip - 1u, underlying.tail());
  }
  //--------------------------------------------------------------------------------------------------------------------
}
//======================================================================================================================


//======================================================================================================================
} // End Namespace
//======================================================================================================================
