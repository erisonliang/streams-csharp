//======================================================================================================================
namespace hhlogic.streams.implementation {
//----------------------------------------------------------------------------------------------------------------------
using System;
//======================================================================================================================


//======================================================================================================================
public sealed class IntStream : AbstractStream<int>
{
  //--------------------------------------------------------------------------------------------------------------------
  private readonly int rangeStartInclusive;
  private readonly int rangeEndExclusive;
  //--------------------------------------------------------------------------------------------------------------------
  public IntStream(int rangeStartInclusive, int rangeEndExclusive)
  {
    this.rangeStartInclusive = rangeStartInclusive < rangeEndExclusive? rangeStartInclusive : rangeEndExclusive;
    this.rangeEndExclusive = rangeEndExclusive;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override bool forEachWhile(Predicate<int> f)
  {
    for(int i = rangeStartInclusive; i < rangeEndExclusive; i++)
      if(!f(i))
        return false;

    return true;
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<uint> fastCount()
  {
    return Maybe.of((uint)(rangeEndExclusive - rangeStartInclusive));
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<int> last()
  {
    return fastCount().filter(i => i > 0).map(i => rangeEndExclusive - 1);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Maybe<int> head()
  {
    return fastCount().filter(i => i > 0).map(i => rangeStartInclusive);
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Stream<int> tail()
  {
    return fastCount()
      .filter(i => i > 1)
      .flatMap(i => (Stream<int>) new IntStream(rangeStartInclusive + 1, rangeEndExclusive));
  }
  //--------------------------------------------------------------------------------------------------------------------
  public override Stream<int> snapshot()
  {
    return this;
  }
  //--------------------------------------------------------------------------------------------------------------------
}
//======================================================================================================================


//======================================================================================================================
} // End Namespace
//======================================================================================================================
